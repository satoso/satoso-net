<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>satoso.net</title>
    <description>佐藤奏のウェブサイト。</description>
    <link>http://satoso.net/</link>
    <atom:link href="http://satoso.net/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Githubのpull requestに対するコメントの付け方は4種類</title>
        <description>&lt;p&gt;Githubのissue(PR)に対するコメントの付け方がいろいろあってよく分からなくなったので実験してみた。4種類ある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pull requestに対するコメント:&lt;br&gt;&lt;code&gt;&amp;lt;username&amp;gt; commented&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;commitに対するコメント:&lt;br&gt;&lt;code&gt;&amp;lt;username&amp;gt; commented on &amp;lt;commit hash&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;commitの特定の行に対するコメント:&lt;br&gt;&lt;code&gt;&amp;lt;username&amp;gt; commented on &amp;lt;commit hash&amp;gt; &amp;lt;filename&amp;gt;:L&amp;lt;line number&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;filesの特定の行に対するコメント:&lt;br&gt;&lt;code&gt;&amp;lt;username&amp;gt; commented on the diff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すべてが入ったサンプルはこちら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/satoso/pullreq/pull/2&quot;&gt;https://github.com/satoso/pullreq/pull/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 May 2014 00:00:00 +0900</pubDate>
        <link>http://satoso.net/text/2014/05/17/github-pr-comment-types.html</link>
        <guid isPermaLink="true">http://satoso.net/text/2014/05/17/github-pr-comment-types.html</guid>
      </item>
    
      <item>
        <title>.htaccessの指定によって無限リダイレクトが発生した件</title>
        <description>&lt;p&gt;ドキュメントの実ファイルをそっくり別のディレクトリに入れておきたい場合がある。例えば &lt;code&gt;/&lt;/code&gt; へのアクセスを &lt;code&gt;/somedir/&lt;/code&gt; へ向ける（&lt;code&gt;/index.html&lt;/code&gt; へのアクセスで &lt;code&gt;/somedir/index.html&lt;/code&gt; を返す）場合， &lt;code&gt;.htaccess&lt;/code&gt; にこんな感じで書く。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;c&quot;&gt;#.htaccess&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# リクエストしたファイルが存在せず，かつディレクトリも存在しない場合，rewriteする&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-f
&lt;span class=&quot;nb&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-d
&lt;span class=&quot;nb&quot;&gt;RewriteRule&lt;/span&gt; ^(.*)$ &lt;span class=&quot;sx&quot;&gt;/somedir/&lt;/span&gt;$1 [L,QSA]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ところがこれをやったらサーバのログにエラーメッセージがたくさん出て，対処方法が分からずずいぶんとハマった。こういうのが大量に出る。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[xxx xxx xx xx:xx:xx 2014] [error] [client xx.xxx.xx.xx] Request exceeded the limit of 10 internal redirects due to probable configuration error. Use &amp;#39;LimitInternalRecursion&amp;#39; to increase the limit if necessary. Use &amp;#39;LogLevel debug&amp;#39; to get a backtrace.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結論から言うと，直接の原因は &lt;em&gt;&lt;code&gt;favicon.ico&lt;/code&gt; と &lt;code&gt;robots.txt&lt;/code&gt; がないこと&lt;/em&gt;だった。そもそも上の記述は， &lt;code&gt;/&lt;/code&gt; にも &lt;code&gt;/somedir/&lt;/code&gt; にも存在しないファイルに対してアクセスがあった場合， &lt;code&gt;/somedir/somedir/somedir/...&lt;/code&gt; と，見つかるまでrewriteし続ける（はず。ログレベルがいじれなくて詳細が分からなかったが）。ブラウザでの閲覧で &lt;code&gt;favicon.ico&lt;/code&gt; に，検索エンジンのクロールで &lt;code&gt;robots.txt&lt;/code&gt; にそれぞれアクセスするので，ファイルがないからリダイレクトの上限に達するまでrewriteされてしまったというわけ。&lt;/p&gt;

&lt;p&gt;当然ながらこれは &lt;code&gt;favicon.ico&lt;/code&gt; と &lt;code&gt;robots.txt&lt;/code&gt; に限った話ではなく，存在しないファイルにアクセスされた場合には同様の結果になる。根本的な解決策としては &lt;em&gt;&lt;code&gt;RewriteCond %{REQUEST_URI} !^/somedir&lt;/code&gt; という1行を追加して， &lt;code&gt;/somedir&lt;/code&gt; で始まるURIに対してはもう書き換えしないようにする。&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;c&quot;&gt;#.htaccess&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# リクエストしたファイルが存在せず，かつディレクトリも存在しない場合，rewriteする&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_URI} !^/somedir
&lt;span class=&quot;nb&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-f
&lt;span class=&quot;nb&quot;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-d
&lt;span class=&quot;nb&quot;&gt;RewriteRule&lt;/span&gt; ^(.*)$ &lt;span class=&quot;sx&quot;&gt;/somedir/&lt;/span&gt;$1 [L,QSA]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sun, 20 Apr 2014 00:00:00 +0900</pubDate>
        <link>http://satoso.net/text/2014/04/20/excessive-redirects-caused-by-htaccess.html</link>
        <guid isPermaLink="true">http://satoso.net/text/2014/04/20/excessive-redirects-caused-by-htaccess.html</guid>
      </item>
    
      <item>
        <title>Jekyllでまとまったデータを扱う: _dataディレクトリの利用</title>
        <description>&lt;p&gt;個人サイトをやっていると，簡易なデータベースを作ってデータを置いておきたい場合がある。つまらない例だが，たとえば蔵書リストのような。こういう場合，少量ならともかく，エントリが増えてくるとHTMLのみで管理するのはつらくなってくる。それに，リストの見せ方を変えたい場合にいちいちリスト全体のHTMLの書き換えが必要になり煩雑である。&lt;/p&gt;

&lt;p&gt;Jekyllには，データをYAMLで保持しておいて，テンプレートに流し込むことでHTMLを生成する機能がある。見せ方を変える場合もテンプレートだけ変えればすむ。ちゃんと公式ドキュメントもあるのだが，なぜか日本語で取り上げているサイトがほとんどないのは地味さのためか。非常に便利なので，&lt;a href=&quot;http://jekyllrb.com/docs/datafiles&quot; title=&quot;Data Files&quot;&gt;公式サイトの説明&lt;/a&gt;の要点をメモしておく。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;_data&lt;/code&gt;ディレクトリを作る。（&lt;code&gt;jekyll new&lt;/code&gt;で作られるディレクトリ構造にはこのフォルダがないので自分で追加する必要がある）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_data&lt;/code&gt;ディレクトリにYAML形式でデータを置く。たとえば&lt;code&gt;books.yaml&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;テンプレート側では&lt;code&gt;site.data.books&lt;/code&gt;でデータを参照可能。&lt;code&gt;books&lt;/code&gt;のところはYAMLのファイル名に依存。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 09 Mar 2014 00:00:00 +0900</pubDate>
        <link>http://satoso.net/text/2014/03/09/handling-data-with-jekyll.html</link>
        <guid isPermaLink="true">http://satoso.net/text/2014/03/09/handling-data-with-jekyll.html</guid>
      </item>
    
  </channel>
</rss>
